version: "3.7"

x-app-config: &app-config
  DJANGO_ENV: dev
  DJANGO_SECRET_KEY: secret_key
  DATABASE_USER: postgres
  DATABASE_PASSWORD: pgpassword
  DATABASE_HOST: db
  DATABASE_PORT: 5432
  POSTGRES_PASSWORD: pgpassword
  STORE_SERVICE: "http://store:8000"
  TRANSACTION_SERVICE: "http://transaction:8000"
  DELIVERY_SERVICE: "http://delivery:8000"
  FINDER_SERVICE: "http://finder:8000"
  NOTIFICATION_SERVICE: "http://notifications:8000"
  KAFKA_SERVER: "kafka:9092"
  REDIS_SERVER: "redis:6379"
  ROOT_PASSWORD: "admin"
  ROOT_TOKEN: "123qwe0-="

services:
  saga:
    image: dkuser2/otus-project:v2
    build: .
    command: make saga
    volumes:
      - .:/app
    environment:
      <<: *app-config
      DATABASE_NAME: postgres
    depends_on:
      - db
      - store
      - transaction
      - delivery
    ports:
      - "8006:8000"
    stdin_open: true
    tty: true

  store:
    build: .
    command: make store
    volumes:
      - .:/app
    environment:
      <<: *app-config
      DATABASE_NAME: store
    depends_on:
      - db
      - kafka
      - redis
    ports:
      - "8001:8000"
    stdin_open: true
    tty: true

  finder:
    build: .
    command: make finder
    volumes:
      - .:/app
    environment:
      <<: *app-config
      DATABASE_NAME: finder
    depends_on:
      - db
    ports:
      - "8004:8000"
    stdin_open: true
    tty: true

  finder_consumer:
    build: .
    command: make finder_consumer
    volumes:
      - .:/app
    environment:
      <<: *app-config
      DATABASE_NAME: finder
    depends_on:
      - db
      - kafka
    stdin_open: true
    tty: true

  transaction:
    build: .
    command: make transaction
    volumes:
      - .:/app
    environment:
      <<: *app-config
      DATABASE_NAME: transaction
    depends_on:
      - db
    ports:
      - "8002:8000"
    stdin_open: true
    tty: true

  delivery:
    build: .
    command: make delivery
    volumes:
      - .:/app
    environment:
      <<: *app-config
      DATABASE_NAME: delivery
    depends_on:
      - db
    ports:
      - "8003:8000"
    stdin_open: true
    tty: true

  notifications:
    build: .
    command: make notifications
    volumes:
      - .:/app
    environment:
      <<: *app-config
      DATABASE_NAME: notifications
    depends_on:
      - db
    ports:
      - "8005:8000"
    stdin_open: true
    tty: true

  notifications_consumer:
    build: .
    command: make notifications_consumer
    volumes:
      - .:/app
    environment:
      <<: *app-config
      DATABASE_NAME: notifications
    depends_on:
      - db
      - kafka
    stdin_open: true
    tty: true

  db:
    image: postgres:12.5-alpine
    environment: *app-config
    ports:
      - "5432:5432"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "9090:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  redis:
    image: redis:6.2
    ports:
      - "6379:6379"

  web:
    image: nginx
    volumes:
      - ./nginx/my.conf:/etc/nginx/nginx.conf/:ro
    ports:
      - "8000:80"
    depends_on:
      - saga
      - store
      - transaction
      - delivery
      - finder
      - notifications
    environment:
      - NGINX_PORT=80

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - saga
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"

  grafana:
    image: grafana/grafana-oss:8.2.0
    depends_on:
      - prometheus
    ports:
      - "9092:3000"
    volumes:
      - "./grafana-storage:/var/lib/grafana"
